heat_template_version: 2014-10-16

description: A template to deploy a load balanced web server

parameters:
  key_name:
    type: string
    description: Keypair utilisee par les serveurs
    default: cloud
    constraints:
      - custom_constraint: nova.keypair
      - allowed_values:
        - cloud
        
  flavor:
    type: string
    description: Flavor utilisee par les serveurs
    default: INF4410-mini
    constraints:
      - custom_constraint: nova.flavor
      - allowed_values:
        - INF4410-mini
      
  image:
    type: string
    description: Image utilisee pour les serveurs
    default: INF4410-Ubuntu-trusty-mini
    constraints:
      - custom_constraint: glance.image
      - allowed_values:
        - INF4410-Ubuntu-trusty-mini
      
  net_id:
    type: string
    description: Network
    default: inf4410-net
    constraints:
      - custom_constraint: neutron.network
      - allowed_values:
        - inf4410-net
      
  external_network_id:
    type: string
    description: Reseau utilise pour le load balancer
    default: 0c3b1354-d3d5-4fec-86d3-19d4d1f13785
    constraints:
      - allowed_values:
        - 0c3b1354-d3d5-4fec-86d3-19d4d1f13785
        
  subnet_id:
    type: string
    description: Sous-reseau dans lequel le load balancer sera situe
    default: 6579eb07-88c3-4707-9c6e-ab90a78cca02
    constraints:
      - allowed_values:
        - 6579eb07-88c3-4707-9c6e-ab90a78cca02

resources:
  server_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: 2
      resource_def:
        type: OS::Nova::Server
        properties:
          name: TP3-server-%index%
          key_name: { get_param: key_name }
          image: { get_param: image }
          flavor: { get_param: flavor }
          networks:
            - network: { get_param: net_id }
          user_data_format: RAW
          user_data: |
            #!/bin/bash
            wget https://raw.githubusercontent.com/houssemmh/INF8480-TP3/master/server.py
            python server.py
  
  mypool:
    type: OS::Neutron::Pool
    properties:
      protocol: HTTP
      monitors: [{ get_resource: monitor }]
      subnet_id: { get_param: subnet_id }
      lb_method: ROUND_ROBIN
      vip:
        protocol_port: 8080
      #A completer

  loadbalancer:
    type: OS::Neutron::LoadBalancer
    properties:
      protocol_port: 8080
      members: { get_attr: [server_nodes, refs] }
      pool_id: { get_resource: mypool }
      #A completer

  monitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: TCP
      delay: 15
      max_retries: 2
      timeout: 5
      #A completer
  
  lb_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: external_network_id }
      port_id: { get_attr: [mypool, vip, port_id] }


outputs:
  pool_ip_address:
    value: {get_attr: [mypool, vip, address]}
    description: The internal IP address of the load balancing pool